# -*- coding: utf-8 -*-
"""Qualtrics_API_Wrapper_Basic_1_py.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11DRHVb58CjrKgvIDL5LhdwHA2b8--rL5
"""

import pandas as pd
import numpy as np
import requests
import zipfile
import json
import io, os
import sys
import re


apiToken = 'YOUR API TOKEN'
user_id = 'YOUR USER ID'
surveyId = 'DESIRED SURVEY ID'
dataCenter = 'NAME OF YOUR DATA CENTER'

class CDT_Qualtrics_API:


  def __init__(self,apiToken,user_id,dataCenter):
    self.apiToken = apiToken
    self.user_id = user_id
    self.dataCenter = dataCenter

  def get_survey_data_basic(self,surveyId,output_file_type):

    """
    Takes a single survey ID and desired output file type and makes a call to the Qualtrics API.
    Returns survey data for the requested survey in the desired format

    surveyId: surveyId from Qualtrics website in the form of a string
    output_file_type: 'json' (default), or 'pandas_dataframe'
    """

    baseUrl = "https://{0}.qualtrics.com/API/v3/surveys/{1}".format(self.dataCenter, surveyId)
    headers = {
    "x-api-token": self.apiToken,
    }

    response = requests.get(baseUrl, headers=headers)
    response_json = response.json()
    
    if output_file_type == 'json':
      return response_json
    elif output_file_type == 'pandas_dataframe':
      # TODO: split dataframe output options into different sections of the json and an all option that returns as flattened json across columns 
      response_df = pd.DataFrame(response_json)
      return response_df


  # THIS IS STILL EXPERIMENTAL AND CURRENTLY DOES NOT RETURN ANYTHING USEFUL
  
  def exportSurvey(self,surveyId,fileFormat):

    surveyId = surveyId
    fileFormat = fileFormat
    dataCenter = self.dataCenter 

    # Setting static parameters
    requestCheckProgress = 0.0
    progressStatus = "inProgress"
    baseUrl = "https://{0}.qualtrics.com/API/v3/surveys/{1}/export-responses/".format(dataCenter, surveyId)
    headers = {
    "content-type": "application/json",
    "x-api-token": self.apiToken,
    }

    # Step 1: Creating Data Export
    downloadRequestUrl = baseUrl
    downloadRequestPayload = '{"format":"' + fileFormat + '"}'
    downloadRequestResponse = requests.request("POST", downloadRequestUrl, data=downloadRequestPayload, headers=headers)
    progressId = downloadRequestResponse.json()["result"]["progressId"]
    print(downloadRequestResponse.text)

    # Step 2: Checking on Data Export Progress and waiting until export is ready
    while progressStatus != "complete" and progressStatus != "failed":
        print ("progressStatus=", progressStatus)
        requestCheckUrl = baseUrl + progressId
        requestCheckResponse = requests.request("GET", requestCheckUrl, headers=headers)
        requestCheckProgress = requestCheckResponse.json()["result"]["percentComplete"]
        print("Download is " + str(requestCheckProgress) + " complete")
        progressStatus = requestCheckResponse.json()["result"]["status"]

    #step 2.1: Check for error
    if progressStatus is "failed":
        raise Exception("export failed")

    fileId = requestCheckResponse.json()["result"]["fileId"]

    # Step 3: Downloading file
    requestDownloadUrl = baseUrl + fileId + '/file'
    requestDownload = requests.request("GET", requestDownloadUrl, headers=headers, stream=True)

    # Step 4: Unzipping the file
    unzipped_data = zipfile.ZipFile(io.BytesIO(requestDownload.content)).extractall("MyQualtricsDownload")
    print('Complete')
    return unzipped_data